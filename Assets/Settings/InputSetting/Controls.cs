//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputSetting/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Body"",
            ""id"": ""12ff33eb-7373-4e1b-81ef-c93180601d30"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""22196b6c-4e77-477d-b393-4f1319c24d6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f419e438-42ae-41ea-8c22-b2329e1c4793"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d300d9aa-9f97-4070-bb01-668b4353d1a2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5aed1e92-7bdc-451a-a98b-e37970729cc4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b09d535e-a5ab-4046-9676-5e77820f317f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""74b874ae-ad40-49a7-b0c6-7f19b2408ed2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""9fc1908a-b844-4e7a-86cf-478bca4a1a29"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Button"",
                    ""id"": ""0228b341-2ba1-42b5-8dcf-a550928142ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SubAttack"",
                    ""type"": ""Button"",
                    ""id"": ""016349cd-4f78-418e-9e71-7fef6533ba3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e13145b8-0402-4918-bcd6-bb05cd13cd9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b930e8a-89d2-4174-9c74-176071837635"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SubAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyAndMouse"",
            ""bindingGroup"": ""KeyAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Body
        m_Body = asset.FindActionMap("Body", throwIfNotFound: true);
        m_Body_Movement = m_Body.FindAction("Movement", throwIfNotFound: true);
        m_Body_Jump = m_Body.FindAction("Jump", throwIfNotFound: true);
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Moving = m_Head.FindAction("Moving", throwIfNotFound: true);
        m_Head_SubAttack = m_Head.FindAction("SubAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Body
    private readonly InputActionMap m_Body;
    private List<IBodyActions> m_BodyActionsCallbackInterfaces = new List<IBodyActions>();
    private readonly InputAction m_Body_Movement;
    private readonly InputAction m_Body_Jump;
    public struct BodyActions
    {
        private @Controls m_Wrapper;
        public BodyActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Body_Movement;
        public InputAction @Jump => m_Wrapper.m_Body_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Body; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BodyActions set) { return set.Get(); }
        public void AddCallbacks(IBodyActions instance)
        {
            if (instance == null || m_Wrapper.m_BodyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BodyActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IBodyActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IBodyActions instance)
        {
            if (m_Wrapper.m_BodyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBodyActions instance)
        {
            foreach (var item in m_Wrapper.m_BodyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BodyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BodyActions @Body => new BodyActions(this);

    // Head
    private readonly InputActionMap m_Head;
    private List<IHeadActions> m_HeadActionsCallbackInterfaces = new List<IHeadActions>();
    private readonly InputAction m_Head_Moving;
    private readonly InputAction m_Head_SubAttack;
    public struct HeadActions
    {
        private @Controls m_Wrapper;
        public HeadActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_Head_Moving;
        public InputAction @SubAttack => m_Wrapper.m_Head_SubAttack;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void AddCallbacks(IHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadActionsCallbackInterfaces.Add(instance);
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
            @SubAttack.started += instance.OnSubAttack;
            @SubAttack.performed += instance.OnSubAttack;
            @SubAttack.canceled += instance.OnSubAttack;
        }

        private void UnregisterCallbacks(IHeadActions instance)
        {
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
            @SubAttack.started -= instance.OnSubAttack;
            @SubAttack.performed -= instance.OnSubAttack;
            @SubAttack.canceled -= instance.OnSubAttack;
        }

        public void RemoveCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadActions @Head => new HeadActions(this);
    private int m_KeyAndMouseSchemeIndex = -1;
    public InputControlScheme KeyAndMouseScheme
    {
        get
        {
            if (m_KeyAndMouseSchemeIndex == -1) m_KeyAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyAndMouse");
            return asset.controlSchemes[m_KeyAndMouseSchemeIndex];
        }
    }
    public interface IBodyActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IHeadActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnSubAttack(InputAction.CallbackContext context);
    }
}
